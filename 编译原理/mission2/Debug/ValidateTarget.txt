
post2dfa 函数的调用信息：NFA 转换到 DFA。

数据信息：

正则表达式(regexp)：
	(a|b)*a(a|b)?

解析树的后序遍历序列(postfix)：
	ab|*a.ab|?.

ε-闭包：
	NFA 状态个数(Count)：0
	NFA 状态数组(NFAStateArray)：

DFA 邻接表：
	下标	DFA 状态的 NFA 状态集合 -> DFA 状态转换链表...
	-----------------------------------------------------

调用 post2nfa 函数返回的 NFA ：

---------------------------------------------------------------------------

post2dfa 函数的返回信息：返回 DFA 的起始地址。

数据信息：

正则表达式(regexp)：
	(a|b)*a(a|b)?

解析树的后序遍历序列(postfix)：
	ab|*a.ab|?.

DFA 邻接表：
	下标	DFA 状态的 NFA 状态集合 -> DFA 状态转换链表...
	-----------------------------------------------------
	| 0		  7  5  1  3  8  9 -> b(4,6,5,1,3,8,9)1 -> a(2,6,5,1,3,8,9,10,17,15,11,13,18)2 -> NULL
	|		 
	| 1		  4  6  5  1  3  8  9 -> b(4,6,5,1,3,8,9)1 -> a(2,6,5,1,3,8,9,10,17,15,11,13,18)2 -> NULL
	|		 
	| 2		【  2  6  5  1  3  8  9 10 17 15 11 13 18】 -> b(4,6,5,1,3,8,9,14,16,18)3 -> a(2,6,5,1,3,8,9,10,17,15,11,13,18,12,16)4 -> NULL
	|		 
	| 3		【  4  6  5  1  3  8  9 14 16 18】 -> b(4,6,5,1,3,8,9)1 -> a(2,6,5,1,3,8,9,10,17,15,11,13,18)2 -> NULL
	|		 
	| 4		【  2  6  5  1  3  8  9 10 17 15 11 13 18 12 16】 -> b(4,6,5,1,3,8,9,14,16,18)3 -> a(2,6,5,1,3,8,9,10,17,15,11,13,18,12,16)4 -> NULL
	|		 

调用 post2nfa 函数返回的 NFA ：
	 7(0)->ε-> 5
	 7(0)->ε-> 8
	 5(0)->ε-> 1
	 5(0)->ε-> 3
	 1(0)-> a-> 2
	 2(0)->ε-> 6
	 6(0)->ε-> 5
	 6(0)->ε-> 8
	 8(0)->ε-> 9
	 9(0)-> a->10
	10(0)->ε->17
	17(0)->ε->15
	17(0)->ε->18
	15(0)->ε->11
	15(0)->ε->13
	11(0)-> a->12
	12(0)->ε->16
	16(0)->ε->18
	18(1)
	13(0)-> b->14
	14(0)->ε->16
	 3(0)-> b-> 4
	 4(0)->ε-> 6

===========================================================================
