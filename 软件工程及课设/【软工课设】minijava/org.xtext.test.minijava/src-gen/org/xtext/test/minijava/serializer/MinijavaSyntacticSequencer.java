/*
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.test.minijava.services.MinijavaGrammarAccess;

@SuppressWarnings("all")
public class MinijavaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MinijavaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_MethodDeclaration_PrivateKeyword_0_2_or_ProtectedKeyword_0_1_or_PublicKeyword_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MinijavaGrammarAccess) access;
		match_MethodDeclaration_PrivateKeyword_0_2_or_ProtectedKeyword_0_1_or_PublicKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMethodDeclarationAccess().getPrivateKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getMethodDeclarationAccess().getProtectedKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getMethodDeclarationAccess().getPublicKeyword_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_MethodDeclaration_PrivateKeyword_0_2_or_ProtectedKeyword_0_1_or_PublicKeyword_0_0.equals(syntax))
				emit_MethodDeclaration_PrivateKeyword_0_2_or_ProtectedKeyword_0_1_or_PublicKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'public' | 'protected' | 'private'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) methodType=Type
	 */
	protected void emit_MethodDeclaration_PrivateKeyword_0_2_or_ProtectedKeyword_0_1_or_PublicKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
