/**
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.minijava.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.test.minijava.minijava.Expr;
import org.xtext.test.minijava.minijava.MinijavaPackage;
import org.xtext.test.minijava.minijava.Statement;
import org.xtext.test.minijava.minijava.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#getStatementType <em>Statement Type</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#getFirstExpression <em>First Expression</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#isIsArrayElementAssignment <em>Is Array Element Assignment</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.StatementImpl#getSecondExpression <em>Second Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The default value of the '{@link #getStatementType() <em>Statement Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementType()
   * @generated
   * @ordered
   */
  protected static final String STATEMENT_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatementType() <em>Statement Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatementType()
   * @generated
   * @ordered
   */
  protected String statementType = STATEMENT_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * The cached value of the '{@link #getFirstExpression() <em>First Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstExpression()
   * @generated
   * @ordered
   */
  protected Expr firstExpression;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The default value of the '{@link #isIsArrayElementAssignment() <em>Is Array Element Assignment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsArrayElementAssignment()
   * @generated
   * @ordered
   */
  protected static final boolean IS_ARRAY_ELEMENT_ASSIGNMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsArrayElementAssignment() <em>Is Array Element Assignment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsArrayElementAssignment()
   * @generated
   * @ordered
   */
  protected boolean isArrayElementAssignment = IS_ARRAY_ELEMENT_ASSIGNMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSecondExpression() <em>Second Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondExpression()
   * @generated
   * @ordered
   */
  protected Expr secondExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinijavaPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStatementType()
  {
    return statementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatementType(String newStatementType)
  {
    String oldStatementType = statementType;
    statementType = newStatementType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__STATEMENT_TYPE, oldStatementType, statementType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, MinijavaPackage.STATEMENT__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getFirstExpression()
  {
    return firstExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirstExpression(Expr newFirstExpression, NotificationChain msgs)
  {
    Expr oldFirstExpression = firstExpression;
    firstExpression = newFirstExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__FIRST_EXPRESSION, oldFirstExpression, newFirstExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirstExpression(Expr newFirstExpression)
  {
    if (newFirstExpression != firstExpression)
    {
      NotificationChain msgs = null;
      if (firstExpression != null)
        msgs = ((InternalEObject)firstExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.STATEMENT__FIRST_EXPRESSION, null, msgs);
      if (newFirstExpression != null)
        msgs = ((InternalEObject)newFirstExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.STATEMENT__FIRST_EXPRESSION, null, msgs);
      msgs = basicSetFirstExpression(newFirstExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__FIRST_EXPRESSION, newFirstExpression, newFirstExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Variable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinijavaPackage.STATEMENT__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsArrayElementAssignment()
  {
    return isArrayElementAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsArrayElementAssignment(boolean newIsArrayElementAssignment)
  {
    boolean oldIsArrayElementAssignment = isArrayElementAssignment;
    isArrayElementAssignment = newIsArrayElementAssignment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT, oldIsArrayElementAssignment, isArrayElementAssignment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getSecondExpression()
  {
    return secondExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSecondExpression(Expr newSecondExpression, NotificationChain msgs)
  {
    Expr oldSecondExpression = secondExpression;
    secondExpression = newSecondExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__SECOND_EXPRESSION, oldSecondExpression, newSecondExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecondExpression(Expr newSecondExpression)
  {
    if (newSecondExpression != secondExpression)
    {
      NotificationChain msgs = null;
      if (secondExpression != null)
        msgs = ((InternalEObject)secondExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.STATEMENT__SECOND_EXPRESSION, null, msgs);
      if (newSecondExpression != null)
        msgs = ((InternalEObject)newSecondExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.STATEMENT__SECOND_EXPRESSION, null, msgs);
      msgs = basicSetSecondExpression(newSecondExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.STATEMENT__SECOND_EXPRESSION, newSecondExpression, newSecondExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinijavaPackage.STATEMENT__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
      case MinijavaPackage.STATEMENT__FIRST_EXPRESSION:
        return basicSetFirstExpression(null, msgs);
      case MinijavaPackage.STATEMENT__SECOND_EXPRESSION:
        return basicSetSecondExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinijavaPackage.STATEMENT__STATEMENT_TYPE:
        return getStatementType();
      case MinijavaPackage.STATEMENT__STATEMENTS:
        return getStatements();
      case MinijavaPackage.STATEMENT__FIRST_EXPRESSION:
        return getFirstExpression();
      case MinijavaPackage.STATEMENT__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case MinijavaPackage.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT:
        return isIsArrayElementAssignment();
      case MinijavaPackage.STATEMENT__SECOND_EXPRESSION:
        return getSecondExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinijavaPackage.STATEMENT__STATEMENT_TYPE:
        setStatementType((String)newValue);
        return;
      case MinijavaPackage.STATEMENT__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MinijavaPackage.STATEMENT__FIRST_EXPRESSION:
        setFirstExpression((Expr)newValue);
        return;
      case MinijavaPackage.STATEMENT__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case MinijavaPackage.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT:
        setIsArrayElementAssignment((Boolean)newValue);
        return;
      case MinijavaPackage.STATEMENT__SECOND_EXPRESSION:
        setSecondExpression((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.STATEMENT__STATEMENT_TYPE:
        setStatementType(STATEMENT_TYPE_EDEFAULT);
        return;
      case MinijavaPackage.STATEMENT__STATEMENTS:
        getStatements().clear();
        return;
      case MinijavaPackage.STATEMENT__FIRST_EXPRESSION:
        setFirstExpression((Expr)null);
        return;
      case MinijavaPackage.STATEMENT__VARIABLE:
        setVariable((Variable)null);
        return;
      case MinijavaPackage.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT:
        setIsArrayElementAssignment(IS_ARRAY_ELEMENT_ASSIGNMENT_EDEFAULT);
        return;
      case MinijavaPackage.STATEMENT__SECOND_EXPRESSION:
        setSecondExpression((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.STATEMENT__STATEMENT_TYPE:
        return STATEMENT_TYPE_EDEFAULT == null ? statementType != null : !STATEMENT_TYPE_EDEFAULT.equals(statementType);
      case MinijavaPackage.STATEMENT__STATEMENTS:
        return statements != null && !statements.isEmpty();
      case MinijavaPackage.STATEMENT__FIRST_EXPRESSION:
        return firstExpression != null;
      case MinijavaPackage.STATEMENT__VARIABLE:
        return variable != null;
      case MinijavaPackage.STATEMENT__IS_ARRAY_ELEMENT_ASSIGNMENT:
        return isArrayElementAssignment != IS_ARRAY_ELEMENT_ASSIGNMENT_EDEFAULT;
      case MinijavaPackage.STATEMENT__SECOND_EXPRESSION:
        return secondExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (statementType: ");
    result.append(statementType);
    result.append(", isArrayElementAssignment: ");
    result.append(isArrayElementAssignment);
    result.append(')');
    return result.toString();
  }

} //StatementImpl
