/**
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.minijava.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.test.minijava.minijava.Expr;
import org.xtext.test.minijava.minijava.MethodCall;
import org.xtext.test.minijava.minijava.MinijavaPackage;
import org.xtext.test.minijava.minijava.NumberValue;
import org.xtext.test.minijava.minijava.Type;
import org.xtext.test.minijava.minijava.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getAddition <em>Addition</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getMultiplication <em>Multiplication</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getNegationOrPointExpression <em>Negation Or Point Expression</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getPoint <em>Point</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getExpressionType <em>Expression Type</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getRight <em>Right</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getSquareBrackets <em>Square Brackets</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getPrimary <em>Primary</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getNumber <em>Number</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getMethodCall <em>Method Call</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.ExprImpl#getLeft <em>Left</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprImpl extends MinimalEObjectImpl.Container implements Expr
{
  /**
   * The cached value of the '{@link #getAddition() <em>Addition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddition()
   * @generated
   * @ordered
   */
  protected Expr addition;

  /**
   * The cached value of the '{@link #getMultiplication() <em>Multiplication</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplication()
   * @generated
   * @ordered
   */
  protected Expr multiplication;

  /**
   * The cached value of the '{@link #getNegationOrPointExpression() <em>Negation Or Point Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNegationOrPointExpression()
   * @generated
   * @ordered
   */
  protected Expr negationOrPointExpression;

  /**
   * The cached value of the '{@link #getPoint() <em>Point</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoint()
   * @generated
   * @ordered
   */
  protected Expr point;

  /**
   * The default value of the '{@link #getExpressionType() <em>Expression Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionType()
   * @generated
   * @ordered
   */
  protected static final String EXPRESSION_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExpressionType() <em>Expression Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionType()
   * @generated
   * @ordered
   */
  protected String expressionType = EXPRESSION_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Expr right;

  /**
   * The cached value of the '{@link #getSquareBrackets() <em>Square Brackets</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSquareBrackets()
   * @generated
   * @ordered
   */
  protected Expr squareBrackets;

  /**
   * The cached value of the '{@link #getPrimary() <em>Primary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimary()
   * @generated
   * @ordered
   */
  protected Expr primary;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expr expression;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Type type;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The cached value of the '{@link #getNumber() <em>Number</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected NumberValue number;

  /**
   * The cached value of the '{@link #getMethodCall() <em>Method Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodCall()
   * @generated
   * @ordered
   */
  protected MethodCall methodCall;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Expr left;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinijavaPackage.Literals.EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getAddition()
  {
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAddition(Expr newAddition, NotificationChain msgs)
  {
    Expr oldAddition = addition;
    addition = newAddition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__ADDITION, oldAddition, newAddition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAddition(Expr newAddition)
  {
    if (newAddition != addition)
    {
      NotificationChain msgs = null;
      if (addition != null)
        msgs = ((InternalEObject)addition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__ADDITION, null, msgs);
      if (newAddition != null)
        msgs = ((InternalEObject)newAddition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__ADDITION, null, msgs);
      msgs = basicSetAddition(newAddition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__ADDITION, newAddition, newAddition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getMultiplication()
  {
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplication(Expr newMultiplication, NotificationChain msgs)
  {
    Expr oldMultiplication = multiplication;
    multiplication = newMultiplication;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__MULTIPLICATION, oldMultiplication, newMultiplication);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplication(Expr newMultiplication)
  {
    if (newMultiplication != multiplication)
    {
      NotificationChain msgs = null;
      if (multiplication != null)
        msgs = ((InternalEObject)multiplication).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__MULTIPLICATION, null, msgs);
      if (newMultiplication != null)
        msgs = ((InternalEObject)newMultiplication).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__MULTIPLICATION, null, msgs);
      msgs = basicSetMultiplication(newMultiplication, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__MULTIPLICATION, newMultiplication, newMultiplication));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getNegationOrPointExpression()
  {
    return negationOrPointExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNegationOrPointExpression(Expr newNegationOrPointExpression, NotificationChain msgs)
  {
    Expr oldNegationOrPointExpression = negationOrPointExpression;
    negationOrPointExpression = newNegationOrPointExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION, oldNegationOrPointExpression, newNegationOrPointExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegationOrPointExpression(Expr newNegationOrPointExpression)
  {
    if (newNegationOrPointExpression != negationOrPointExpression)
    {
      NotificationChain msgs = null;
      if (negationOrPointExpression != null)
        msgs = ((InternalEObject)negationOrPointExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION, null, msgs);
      if (newNegationOrPointExpression != null)
        msgs = ((InternalEObject)newNegationOrPointExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION, null, msgs);
      msgs = basicSetNegationOrPointExpression(newNegationOrPointExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION, newNegationOrPointExpression, newNegationOrPointExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getPoint()
  {
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoint(Expr newPoint, NotificationChain msgs)
  {
    Expr oldPoint = point;
    point = newPoint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__POINT, oldPoint, newPoint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoint(Expr newPoint)
  {
    if (newPoint != point)
    {
      NotificationChain msgs = null;
      if (point != null)
        msgs = ((InternalEObject)point).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__POINT, null, msgs);
      if (newPoint != null)
        msgs = ((InternalEObject)newPoint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__POINT, null, msgs);
      msgs = basicSetPoint(newPoint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__POINT, newPoint, newPoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExpressionType()
  {
    return expressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionType(String newExpressionType)
  {
    String oldExpressionType = expressionType;
    expressionType = newExpressionType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__EXPRESSION_TYPE, oldExpressionType, expressionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(Expr newRight, NotificationChain msgs)
  {
    Expr oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(Expr newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getSquareBrackets()
  {
    return squareBrackets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSquareBrackets(Expr newSquareBrackets, NotificationChain msgs)
  {
    Expr oldSquareBrackets = squareBrackets;
    squareBrackets = newSquareBrackets;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__SQUARE_BRACKETS, oldSquareBrackets, newSquareBrackets);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSquareBrackets(Expr newSquareBrackets)
  {
    if (newSquareBrackets != squareBrackets)
    {
      NotificationChain msgs = null;
      if (squareBrackets != null)
        msgs = ((InternalEObject)squareBrackets).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__SQUARE_BRACKETS, null, msgs);
      if (newSquareBrackets != null)
        msgs = ((InternalEObject)newSquareBrackets).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__SQUARE_BRACKETS, null, msgs);
      msgs = basicSetSquareBrackets(newSquareBrackets, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__SQUARE_BRACKETS, newSquareBrackets, newSquareBrackets));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getPrimary()
  {
    return primary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimary(Expr newPrimary, NotificationChain msgs)
  {
    Expr oldPrimary = primary;
    primary = newPrimary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__PRIMARY, oldPrimary, newPrimary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrimary(Expr newPrimary)
  {
    if (newPrimary != primary)
    {
      NotificationChain msgs = null;
      if (primary != null)
        msgs = ((InternalEObject)primary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__PRIMARY, null, msgs);
      if (newPrimary != null)
        msgs = ((InternalEObject)newPrimary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__PRIMARY, null, msgs);
      msgs = basicSetPrimary(newPrimary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__PRIMARY, newPrimary, newPrimary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expr newExpression, NotificationChain msgs)
  {
    Expr oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(Expr newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(Type newType, NotificationChain msgs)
  {
    Type oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(Type newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Variable)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MinijavaPackage.EXPR__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberValue getNumber()
  {
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNumber(NumberValue newNumber, NotificationChain msgs)
  {
    NumberValue oldNumber = number;
    number = newNumber;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__NUMBER, oldNumber, newNumber);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumber(NumberValue newNumber)
  {
    if (newNumber != number)
    {
      NotificationChain msgs = null;
      if (number != null)
        msgs = ((InternalEObject)number).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__NUMBER, null, msgs);
      if (newNumber != null)
        msgs = ((InternalEObject)newNumber).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__NUMBER, null, msgs);
      msgs = basicSetNumber(newNumber, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__NUMBER, newNumber, newNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCall getMethodCall()
  {
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethodCall(MethodCall newMethodCall, NotificationChain msgs)
  {
    MethodCall oldMethodCall = methodCall;
    methodCall = newMethodCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__METHOD_CALL, oldMethodCall, newMethodCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethodCall(MethodCall newMethodCall)
  {
    if (newMethodCall != methodCall)
    {
      NotificationChain msgs = null;
      if (methodCall != null)
        msgs = ((InternalEObject)methodCall).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__METHOD_CALL, null, msgs);
      if (newMethodCall != null)
        msgs = ((InternalEObject)newMethodCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__METHOD_CALL, null, msgs);
      msgs = basicSetMethodCall(newMethodCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__METHOD_CALL, newMethodCall, newMethodCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Expr newLeft, NotificationChain msgs)
  {
    Expr oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(Expr newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.EXPR__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.EXPR__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinijavaPackage.EXPR__ADDITION:
        return basicSetAddition(null, msgs);
      case MinijavaPackage.EXPR__MULTIPLICATION:
        return basicSetMultiplication(null, msgs);
      case MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION:
        return basicSetNegationOrPointExpression(null, msgs);
      case MinijavaPackage.EXPR__POINT:
        return basicSetPoint(null, msgs);
      case MinijavaPackage.EXPR__RIGHT:
        return basicSetRight(null, msgs);
      case MinijavaPackage.EXPR__SQUARE_BRACKETS:
        return basicSetSquareBrackets(null, msgs);
      case MinijavaPackage.EXPR__PRIMARY:
        return basicSetPrimary(null, msgs);
      case MinijavaPackage.EXPR__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MinijavaPackage.EXPR__TYPE:
        return basicSetType(null, msgs);
      case MinijavaPackage.EXPR__NUMBER:
        return basicSetNumber(null, msgs);
      case MinijavaPackage.EXPR__METHOD_CALL:
        return basicSetMethodCall(null, msgs);
      case MinijavaPackage.EXPR__LEFT:
        return basicSetLeft(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinijavaPackage.EXPR__ADDITION:
        return getAddition();
      case MinijavaPackage.EXPR__MULTIPLICATION:
        return getMultiplication();
      case MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION:
        return getNegationOrPointExpression();
      case MinijavaPackage.EXPR__POINT:
        return getPoint();
      case MinijavaPackage.EXPR__EXPRESSION_TYPE:
        return getExpressionType();
      case MinijavaPackage.EXPR__RIGHT:
        return getRight();
      case MinijavaPackage.EXPR__SQUARE_BRACKETS:
        return getSquareBrackets();
      case MinijavaPackage.EXPR__PRIMARY:
        return getPrimary();
      case MinijavaPackage.EXPR__EXPRESSION:
        return getExpression();
      case MinijavaPackage.EXPR__TYPE:
        return getType();
      case MinijavaPackage.EXPR__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case MinijavaPackage.EXPR__NUMBER:
        return getNumber();
      case MinijavaPackage.EXPR__METHOD_CALL:
        return getMethodCall();
      case MinijavaPackage.EXPR__LEFT:
        return getLeft();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinijavaPackage.EXPR__ADDITION:
        setAddition((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__MULTIPLICATION:
        setMultiplication((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION:
        setNegationOrPointExpression((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__POINT:
        setPoint((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__EXPRESSION_TYPE:
        setExpressionType((String)newValue);
        return;
      case MinijavaPackage.EXPR__RIGHT:
        setRight((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__SQUARE_BRACKETS:
        setSquareBrackets((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__PRIMARY:
        setPrimary((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__EXPRESSION:
        setExpression((Expr)newValue);
        return;
      case MinijavaPackage.EXPR__TYPE:
        setType((Type)newValue);
        return;
      case MinijavaPackage.EXPR__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case MinijavaPackage.EXPR__NUMBER:
        setNumber((NumberValue)newValue);
        return;
      case MinijavaPackage.EXPR__METHOD_CALL:
        setMethodCall((MethodCall)newValue);
        return;
      case MinijavaPackage.EXPR__LEFT:
        setLeft((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.EXPR__ADDITION:
        setAddition((Expr)null);
        return;
      case MinijavaPackage.EXPR__MULTIPLICATION:
        setMultiplication((Expr)null);
        return;
      case MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION:
        setNegationOrPointExpression((Expr)null);
        return;
      case MinijavaPackage.EXPR__POINT:
        setPoint((Expr)null);
        return;
      case MinijavaPackage.EXPR__EXPRESSION_TYPE:
        setExpressionType(EXPRESSION_TYPE_EDEFAULT);
        return;
      case MinijavaPackage.EXPR__RIGHT:
        setRight((Expr)null);
        return;
      case MinijavaPackage.EXPR__SQUARE_BRACKETS:
        setSquareBrackets((Expr)null);
        return;
      case MinijavaPackage.EXPR__PRIMARY:
        setPrimary((Expr)null);
        return;
      case MinijavaPackage.EXPR__EXPRESSION:
        setExpression((Expr)null);
        return;
      case MinijavaPackage.EXPR__TYPE:
        setType((Type)null);
        return;
      case MinijavaPackage.EXPR__VARIABLE:
        setVariable((Variable)null);
        return;
      case MinijavaPackage.EXPR__NUMBER:
        setNumber((NumberValue)null);
        return;
      case MinijavaPackage.EXPR__METHOD_CALL:
        setMethodCall((MethodCall)null);
        return;
      case MinijavaPackage.EXPR__LEFT:
        setLeft((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.EXPR__ADDITION:
        return addition != null;
      case MinijavaPackage.EXPR__MULTIPLICATION:
        return multiplication != null;
      case MinijavaPackage.EXPR__NEGATION_OR_POINT_EXPRESSION:
        return negationOrPointExpression != null;
      case MinijavaPackage.EXPR__POINT:
        return point != null;
      case MinijavaPackage.EXPR__EXPRESSION_TYPE:
        return EXPRESSION_TYPE_EDEFAULT == null ? expressionType != null : !EXPRESSION_TYPE_EDEFAULT.equals(expressionType);
      case MinijavaPackage.EXPR__RIGHT:
        return right != null;
      case MinijavaPackage.EXPR__SQUARE_BRACKETS:
        return squareBrackets != null;
      case MinijavaPackage.EXPR__PRIMARY:
        return primary != null;
      case MinijavaPackage.EXPR__EXPRESSION:
        return expression != null;
      case MinijavaPackage.EXPR__TYPE:
        return type != null;
      case MinijavaPackage.EXPR__VARIABLE:
        return variable != null;
      case MinijavaPackage.EXPR__NUMBER:
        return number != null;
      case MinijavaPackage.EXPR__METHOD_CALL:
        return methodCall != null;
      case MinijavaPackage.EXPR__LEFT:
        return left != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (expressionType: ");
    result.append(expressionType);
    result.append(')');
    return result.toString();
  }

} //ExprImpl
