/**
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.minijava.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.test.minijava.minijava.MinijavaPackage;
import org.xtext.test.minijava.minijava.VarDeclaration;
import org.xtext.test.minijava.minijava.VarLi;
import org.xtext.test.minijava.minijava.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.VarDeclarationImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.VarDeclarationImpl#getVarLi <em>Var Li</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarDeclarationImpl extends VarListImpl implements VarDeclaration
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The cached value of the '{@link #getVarLi() <em>Var Li</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarLi()
   * @generated
   * @ordered
   */
  protected VarLi varLi;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VarDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinijavaPackage.Literals.VAR_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(Variable newVariable, NotificationChain msgs)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.VAR_DECLARATION__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.VAR_DECLARATION__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.VAR_DECLARATION__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.VAR_DECLARATION__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarLi getVarLi()
  {
    return varLi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVarLi(VarLi newVarLi, NotificationChain msgs)
  {
    VarLi oldVarLi = varLi;
    varLi = newVarLi;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.VAR_DECLARATION__VAR_LI, oldVarLi, newVarLi);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarLi(VarLi newVarLi)
  {
    if (newVarLi != varLi)
    {
      NotificationChain msgs = null;
      if (varLi != null)
        msgs = ((InternalEObject)varLi).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.VAR_DECLARATION__VAR_LI, null, msgs);
      if (newVarLi != null)
        msgs = ((InternalEObject)newVarLi).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.VAR_DECLARATION__VAR_LI, null, msgs);
      msgs = basicSetVarLi(newVarLi, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.VAR_DECLARATION__VAR_LI, newVarLi, newVarLi));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinijavaPackage.VAR_DECLARATION__VARIABLE:
        return basicSetVariable(null, msgs);
      case MinijavaPackage.VAR_DECLARATION__VAR_LI:
        return basicSetVarLi(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinijavaPackage.VAR_DECLARATION__VARIABLE:
        return getVariable();
      case MinijavaPackage.VAR_DECLARATION__VAR_LI:
        return getVarLi();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinijavaPackage.VAR_DECLARATION__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case MinijavaPackage.VAR_DECLARATION__VAR_LI:
        setVarLi((VarLi)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.VAR_DECLARATION__VARIABLE:
        setVariable((Variable)null);
        return;
      case MinijavaPackage.VAR_DECLARATION__VAR_LI:
        setVarLi((VarLi)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.VAR_DECLARATION__VARIABLE:
        return variable != null;
      case MinijavaPackage.VAR_DECLARATION__VAR_LI:
        return varLi != null;
    }
    return super.eIsSet(featureID);
  }

} //VarDeclarationImpl
