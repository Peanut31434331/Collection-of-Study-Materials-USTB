/*
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MinijavaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDeclParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportdeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportdeclImportDeclParserRuleCall_1_0 = (RuleCall)cImportdeclAssignment_1.eContents().get(0);
		private final Assignment cClassDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassDeclarationsMainClassParserRuleCall_2_0 = (RuleCall)cClassDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cClassDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassDeclarationsClassDeclarationParserRuleCall_3_0 = (RuleCall)cClassDeclarationsAssignment_3.eContents().get(0);
		
		//Goal:
		//    ( package = PackageDecl )? ( importdecl += ImportDecl )* classDeclarations += MainClass ( classDeclarations += ClassDeclaration )*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//( package = PackageDecl )? ( importdecl += ImportDecl )* classDeclarations += MainClass ( classDeclarations += ClassDeclaration )*
		public Group getGroup() { return cGroup; }
		
		//( package = PackageDecl )?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//PackageDecl
		public RuleCall getPackagePackageDeclParserRuleCall_0_0() { return cPackagePackageDeclParserRuleCall_0_0; }
		
		//( importdecl += ImportDecl )*
		public Assignment getImportdeclAssignment_1() { return cImportdeclAssignment_1; }
		
		//ImportDecl
		public RuleCall getImportdeclImportDeclParserRuleCall_1_0() { return cImportdeclImportDeclParserRuleCall_1_0; }
		
		//classDeclarations += MainClass
		public Assignment getClassDeclarationsAssignment_2() { return cClassDeclarationsAssignment_2; }
		
		//MainClass
		public RuleCall getClassDeclarationsMainClassParserRuleCall_2_0() { return cClassDeclarationsMainClassParserRuleCall_2_0; }
		
		//( classDeclarations += ClassDeclaration )*
		public Assignment getClassDeclarationsAssignment_3() { return cClassDeclarationsAssignment_3; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationsClassDeclarationParserRuleCall_3_0() { return cClassDeclarationsClassDeclarationParserRuleCall_3_0; }
	}
	public class PackageDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.PackageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageDecl:
		//  'package' QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDecl:
		//    'import' QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedName_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.QualifiedName_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cQualifiedName_ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedName_:
		//    "." ID QualifiedName_
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"." ID QualifiedName_
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//QualifiedName_
		public RuleCall getQualifiedName_ParserRuleCall_2() { return cQualifiedName_ParserRuleCall_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cQualifiedName_ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//    ID QualifiedName_
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID QualifiedName_
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//QualifiedName_
		public RuleCall getQualifiedName_ParserRuleCall_1() { return cQualifiedName_ParserRuleCall_1; }
	}
	public class QualifiedNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.QualifiedNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifiedNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameQualifiedNameParserRuleCall_0_0 = (RuleCall)cQualifiedNameAssignment_0.eContents().get(0);
		private final Assignment cQualifiedNameLiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedNameLiQualifiedNameLiParserRuleCall_1_0 = (RuleCall)cQualifiedNameLiAssignment_1.eContents().get(0);
		
		//QualifiedNameList:
		//    qualifiedName = QualifiedName (qualifiedNameLi = QualifiedNameLi)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//qualifiedName = QualifiedName (qualifiedNameLi = QualifiedNameLi)?
		public Group getGroup() { return cGroup; }
		
		//qualifiedName = QualifiedName
		public Assignment getQualifiedNameAssignment_0() { return cQualifiedNameAssignment_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameQualifiedNameParserRuleCall_0_0() { return cQualifiedNameQualifiedNameParserRuleCall_0_0; }
		
		//(qualifiedNameLi = QualifiedNameLi)?
		public Assignment getQualifiedNameLiAssignment_1() { return cQualifiedNameLiAssignment_1; }
		
		//QualifiedNameLi
		public RuleCall getQualifiedNameLiQualifiedNameLiParserRuleCall_1_0() { return cQualifiedNameLiQualifiedNameLiParserRuleCall_1_0; }
	}
	public class QualifiedNameLiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.QualifiedNameLi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cQualifiedNameAssignment_1.eContents().get(0);
		private final Assignment cQualifiedNameLiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifiedNameLiQualifiedNameLiParserRuleCall_2_0 = (RuleCall)cQualifiedNameLiAssignment_2.eContents().get(0);
		
		//QualifiedNameLi:
		//    "," qualifiedName = QualifiedName qualifiedNameLi = QualifiedNameLi
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"," qualifiedName = QualifiedName qualifiedNameLi = QualifiedNameLi
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//qualifiedName = QualifiedName
		public Assignment getQualifiedNameAssignment_1() { return cQualifiedNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getQualifiedNameQualifiedNameParserRuleCall_1_0() { return cQualifiedNameQualifiedNameParserRuleCall_1_0; }
		
		//qualifiedNameLi = QualifiedNameLi
		public Assignment getQualifiedNameLiAssignment_2() { return cQualifiedNameLiAssignment_2; }
		
		//QualifiedNameLi
		public RuleCall getQualifiedNameLiQualifiedNameLiParserRuleCall_2_0() { return cQualifiedNameLiQualifiedNameLiParserRuleCall_2_0; }
	}
	public class MainClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.MainClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPublicKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStaticKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVoidKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cMainKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cStringKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cIDTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Alternatives cAlternatives_14 = (Alternatives)cGroup.eContents().get(14);
		private final Assignment cVarDeclarationsAssignment_14_0 = (Assignment)cAlternatives_14.eContents().get(0);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_14_0_0 = (RuleCall)cVarDeclarationsAssignment_14_0.eContents().get(0);
		private final Assignment cMethodDeclarationsAssignment_14_1 = (Assignment)cAlternatives_14.eContents().get(1);
		private final RuleCall cMethodDeclarationsMethodDeclarationParserRuleCall_14_1_0 = (RuleCall)cMethodDeclarationsAssignment_14_1.eContents().get(0);
		private final Assignment cStatementAssignment_14_2 = (Assignment)cAlternatives_14.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_14_2_0 = (RuleCall)cStatementAssignment_14_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//MainClass:
		//    'class' name = ID '{'
		//        'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{'
		//        ( varDeclarations += VarDeclaration
		//        | methodDeclarations += MethodDeclaration
		//        | statement = Statement
		//        )*
		//        '}'
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name = ID '{'
		//    'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{'
		//    ( varDeclarations += VarDeclaration
		//    | methodDeclarations += MethodDeclaration
		//    | statement = Statement
		//    )*
		//    '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'public'
		public Keyword getPublicKeyword_3() { return cPublicKeyword_3; }
		
		//'static'
		public Keyword getStaticKeyword_4() { return cStaticKeyword_4; }
		
		//'void'
		public Keyword getVoidKeyword_5() { return cVoidKeyword_5; }
		
		//'main'
		public Keyword getMainKeyword_6() { return cMainKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//'String'
		public Keyword getStringKeyword_8() { return cStringKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_11() { return cIDTerminalRuleCall_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_13() { return cLeftCurlyBracketKeyword_13; }
		
		//( varDeclarations += VarDeclaration
		//| methodDeclarations += MethodDeclaration
		//| statement = Statement
		//)*
		public Alternatives getAlternatives_14() { return cAlternatives_14; }
		
		//varDeclarations += VarDeclaration
		public Assignment getVarDeclarationsAssignment_14_0() { return cVarDeclarationsAssignment_14_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_14_0_0() { return cVarDeclarationsVarDeclarationParserRuleCall_14_0_0; }
		
		//methodDeclarations += MethodDeclaration
		public Assignment getMethodDeclarationsAssignment_14_1() { return cMethodDeclarationsAssignment_14_1; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationsMethodDeclarationParserRuleCall_14_1_0() { return cMethodDeclarationsMethodDeclarationParserRuleCall_14_1_0; }
		
		//statement = Statement
		public Assignment getStatementAssignment_14_2() { return cStatementAssignment_14_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_14_2_0() { return cStatementStatementParserRuleCall_14_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cQualifiedNameClassDeclarationCrossReference_2_1_0 = (CrossReference)cQualifiedNameAssignment_2_1.eContents().get(0);
		private final RuleCall cQualifiedNameClassDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cQualifiedNameClassDeclarationCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualifiedNameListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualifiedNameListQualifiedNameListParserRuleCall_3_1_0 = (RuleCall)cQualifiedNameListAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cVarDeclarationsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cVarDeclarationsVarDeclarationParserRuleCall_5_0_0 = (RuleCall)cVarDeclarationsAssignment_5_0.eContents().get(0);
		private final Assignment cMethodDeclarationsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cMethodDeclarationsMethodDeclarationParserRuleCall_5_1_0 = (RuleCall)cMethodDeclarationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClassDeclaration:
		//    'class' name = ID ( 'extends' qualifiedName =  [ClassDeclaration | ID]  )? ('implements' qualifiedNameList = QualifiedNameList)? '{'
		//        ( varDeclarations += VarDeclaration
		//        | methodDeclarations += MethodDeclaration )*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name = ID ( 'extends' qualifiedName =  [ClassDeclaration | ID]  )? ('implements' qualifiedNameList = QualifiedNameList)? '{'
		//    ( varDeclarations += VarDeclaration
		//    | methodDeclarations += MethodDeclaration )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//( 'extends' qualifiedName =  [ClassDeclaration | ID]  )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//qualifiedName =  [ClassDeclaration | ID]
		public Assignment getQualifiedNameAssignment_2_1() { return cQualifiedNameAssignment_2_1; }
		
		//[ClassDeclaration | ID]
		public CrossReference getQualifiedNameClassDeclarationCrossReference_2_1_0() { return cQualifiedNameClassDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getQualifiedNameClassDeclarationIDTerminalRuleCall_2_1_0_1() { return cQualifiedNameClassDeclarationIDTerminalRuleCall_2_1_0_1; }
		
		//('implements' qualifiedNameList = QualifiedNameList)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'implements'
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }
		
		//qualifiedNameList = QualifiedNameList
		public Assignment getQualifiedNameListAssignment_3_1() { return cQualifiedNameListAssignment_3_1; }
		
		//QualifiedNameList
		public RuleCall getQualifiedNameListQualifiedNameListParserRuleCall_3_1_0() { return cQualifiedNameListQualifiedNameListParserRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//( varDeclarations += VarDeclaration
		//| methodDeclarations += MethodDeclaration )*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//varDeclarations += VarDeclaration
		public Assignment getVarDeclarationsAssignment_5_0() { return cVarDeclarationsAssignment_5_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationsVarDeclarationParserRuleCall_5_0_0() { return cVarDeclarationsVarDeclarationParserRuleCall_5_0_0; }
		
		//methodDeclarations += MethodDeclaration
		public Assignment getMethodDeclarationsAssignment_5_1() { return cMethodDeclarationsAssignment_5_1; }
		
		//MethodDeclaration
		public RuleCall getMethodDeclarationsMethodDeclarationParserRuleCall_5_1_0() { return cMethodDeclarationsMethodDeclarationParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cTypeNameLeftSquareBracketKeyword_0_1_0 = (Keyword)cTypeNameAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameIntKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameBooleanKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeNameDoubleKeyword_3_0 = (Keyword)cTypeNameAssignment_3.eContents().get(0);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeNameCharKeyword_4_0 = (Keyword)cTypeNameAssignment_4.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cQualifiedNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cQualifiedNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVarListAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVarListVarListParserRuleCall_6_1_0 = (RuleCall)cVarListAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Type:
		//    'int' typeName = '[' ']'
		//    |    typeName = 'int'
		//    |    typeName = 'boolean'
		//    |    typeName = 'double'
		//    |    typeName = 'char'
		//    |    qualifiedName = QualifiedName
		//    |    '(' varList = VarList ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' typeName = '[' ']'
		//|    typeName = 'int'
		//|    typeName = 'boolean'
		//|    typeName = 'double'
		//|    typeName = 'char'
		//|    qualifiedName = QualifiedName
		//|    '(' varList = VarList ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int' typeName = '[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'int'
		public Keyword getIntKeyword_0_0() { return cIntKeyword_0_0; }
		
		//typeName = '['
		public Assignment getTypeNameAssignment_0_1() { return cTypeNameAssignment_0_1; }
		
		//'['
		public Keyword getTypeNameLeftSquareBracketKeyword_0_1_0() { return cTypeNameLeftSquareBracketKeyword_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//typeName = 'int'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//'int'
		public Keyword getTypeNameIntKeyword_1_0() { return cTypeNameIntKeyword_1_0; }
		
		//typeName = 'boolean'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//'boolean'
		public Keyword getTypeNameBooleanKeyword_2_0() { return cTypeNameBooleanKeyword_2_0; }
		
		//typeName = 'double'
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }
		
		//'double'
		public Keyword getTypeNameDoubleKeyword_3_0() { return cTypeNameDoubleKeyword_3_0; }
		
		//typeName = 'char'
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }
		
		//'char'
		public Keyword getTypeNameCharKeyword_4_0() { return cTypeNameCharKeyword_4_0; }
		
		//qualifiedName = QualifiedName
		public Assignment getQualifiedNameAssignment_5() { return cQualifiedNameAssignment_5; }
		
		//QualifiedName
		public RuleCall getQualifiedNameQualifiedNameParserRuleCall_5_0() { return cQualifiedNameQualifiedNameParserRuleCall_5_0; }
		
		//'(' varList = VarList ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//varList = VarList
		public Assignment getVarListAssignment_6_1() { return cVarListAssignment_6_1; }
		
		//VarList
		public RuleCall getVarListVarListParserRuleCall_6_1_0() { return cVarListVarListParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VarDeclaration:
		//    variable = Variable ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable = Variable ';'
		public Group getGroup() { return cGroup; }
		
		//variable = Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableTypeTypeParserRuleCall_0_0 = (RuleCall)cVariableTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//    variableType = Type name = ID
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variableType = Type name = ID
		public Group getGroup() { return cGroup; }
		
		//variableType = Type
		public Assignment getVariableTypeAssignment_0() { return cVariableTypeAssignment_0; }
		
		//Type
		public RuleCall getVariableTypeTypeParserRuleCall_0_0() { return cVariableTypeTypeParserRuleCall_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.VarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVarDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cVarLiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarLiVarLiParserRuleCall_1_0 = (RuleCall)cVarLiAssignment_1.eContents().get(0);
		
		//VarList :
		//    VarDeclaration varLi = VarLi
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VarDeclaration varLi = VarLi
		public Group getGroup() { return cGroup; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_0() { return cVarDeclarationParserRuleCall_0; }
		
		//varLi = VarLi
		public Assignment getVarLiAssignment_1() { return cVarLiAssignment_1; }
		
		//VarLi
		public RuleCall getVarLiVarLiParserRuleCall_1_0() { return cVarLiVarLiParserRuleCall_1_0; }
	}
	public class VarLiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.VarLi");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVarDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVarLiAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarLiVarLiParserRuleCall_2_0 = (RuleCall)cVarLiAssignment_2.eContents().get(0);
		
		//VarLi :
		//    ',' VarDeclaration varLi = VarLi
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//',' VarDeclaration varLi = VarLi
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclarationParserRuleCall_1() { return cVarDeclarationParserRuleCall_1; }
		
		//varLi = VarLi
		public Assignment getVarLiAssignment_2() { return cVarLiAssignment_2; }
		
		//VarLi
		public RuleCall getVarLiVarLiParserRuleCall_2_0() { return cVarLiVarLiParserRuleCall_2_0; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPublicKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cProtectedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cPrivateKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cMethodTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodTypeTypeParserRuleCall_1_0 = (RuleCall)cMethodTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarListVarListParserRuleCall_4_0 = (RuleCall)cVarListAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLocalVarDeclarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocalVarDeclarationsVarDeclarationParserRuleCall_7_0 = (RuleCall)cLocalVarDeclarationsAssignment_7.eContents().get(0);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cReturnKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cReturnExpressionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cReturnExpressionExpressionParserRuleCall_9_1_0 = (RuleCall)cReturnExpressionAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//MethodDeclaration returns Method:
		//    ('public'|'protected'|'private') methodType = Type name = ID '(' varList =  VarList? ')' '{'
		//        ( localVarDeclarations += VarDeclaration )*
		//        ( statements += Statement )*
		//        ('return' returnExpression = Expression ';')?
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('public'|'protected'|'private') methodType = Type name = ID '(' varList =  VarList? ')' '{'
		//    ( localVarDeclarations += VarDeclaration )*
		//    ( statements += Statement )*
		//    ('return' returnExpression = Expression ';')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//('public'|'protected'|'private')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'public'
		public Keyword getPublicKeyword_0_0() { return cPublicKeyword_0_0; }
		
		//'protected'
		public Keyword getProtectedKeyword_0_1() { return cProtectedKeyword_0_1; }
		
		//'private'
		public Keyword getPrivateKeyword_0_2() { return cPrivateKeyword_0_2; }
		
		//methodType = Type
		public Assignment getMethodTypeAssignment_1() { return cMethodTypeAssignment_1; }
		
		//Type
		public RuleCall getMethodTypeTypeParserRuleCall_1_0() { return cMethodTypeTypeParserRuleCall_1_0; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//varList =  VarList?
		public Assignment getVarListAssignment_4() { return cVarListAssignment_4; }
		
		//VarList
		public RuleCall getVarListVarListParserRuleCall_4_0() { return cVarListVarListParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//( localVarDeclarations += VarDeclaration )*
		public Assignment getLocalVarDeclarationsAssignment_7() { return cLocalVarDeclarationsAssignment_7; }
		
		//VarDeclaration
		public RuleCall getLocalVarDeclarationsVarDeclarationParserRuleCall_7_0() { return cLocalVarDeclarationsVarDeclarationParserRuleCall_7_0; }
		
		//( statements += Statement )*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }
		
		//('return' returnExpression = Expression ';')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'return'
		public Keyword getReturnKeyword_9_0() { return cReturnKeyword_9_0; }
		
		//returnExpression = Expression
		public Assignment getReturnExpressionAssignment_9_1() { return cReturnExpressionAssignment_9_1; }
		
		//Expression
		public RuleCall getReturnExpressionExpressionParserRuleCall_9_1_0() { return cReturnExpressionExpressionParserRuleCall_9_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9_2() { return cSemicolonKeyword_9_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStatementTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cStatementTypeLeftCurlyBracketKeyword_0_0_0 = (Keyword)cStatementTypeAssignment_0_0.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0_1_0 = (RuleCall)cStatementsAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStatementTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStatementTypeIfKeyword_1_0_0 = (Keyword)cStatementTypeAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cFirstExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_1_4_0 = (RuleCall)cStatementsAssignment_1_4.eContents().get(0);
		private final Keyword cElseKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cStatementsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_1_6_0 = (RuleCall)cStatementsAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cStatementTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cStatementTypeWhileKeyword_2_0_0 = (Keyword)cStatementTypeAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cFirstExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_2_4_0 = (RuleCall)cStatementsAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cVariableAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_3_0_0 = (CrossReference)cVariableAssignment_3_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_0_0_1 = (RuleCall)cVariableVariableCrossReference_3_0_0.eContents().get(1);
		private final Assignment cStatementTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cStatementTypeEqualsSignKeyword_3_1_0 = (Keyword)cStatementTypeAssignment_3_1.eContents().get(0);
		private final Assignment cFirstExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_3_2_0 = (RuleCall)cFirstExpressionAssignment_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cVariableAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_4_0_0 = (CrossReference)cVariableAssignment_4_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_4_0_0_1 = (RuleCall)cVariableVariableCrossReference_4_0_0.eContents().get(1);
		private final Assignment cIsArrayElementAssignmentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cIsArrayElementAssignmentLeftSquareBracketKeyword_4_1_0 = (Keyword)cIsArrayElementAssignmentAssignment_4_1.eContents().get(0);
		private final Assignment cFirstExpressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFirstExpressionExpressionParserRuleCall_4_2_0 = (RuleCall)cFirstExpressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cStatementTypeAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final Keyword cStatementTypeEqualsSignKeyword_4_4_0 = (Keyword)cStatementTypeAssignment_4_4.eContents().get(0);
		private final Assignment cSecondExpressionAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cSecondExpressionExpressionParserRuleCall_4_5_0 = (RuleCall)cSecondExpressionAssignment_4_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		
		//Statement:
		//    statementType = '{' ( statements += Statement )* '}'
		//    |    statementType = 'if' '(' firstExpression = Expression ')' statements += Statement 'else' statements += Statement
		//    |    statementType = 'while' '(' firstExpression = Expression ')' statements += Statement
		//    |    variable = [Variable | ID] statementType = '=' firstExpression = Expression ';'
		//    |    variable = [Variable | ID] isArrayElementAssignment?='[' firstExpression = Expression ']'
		//            statementType = '=' secondExpression = Expression ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//statementType = '{' ( statements += Statement )* '}'
		//|    statementType = 'if' '(' firstExpression = Expression ')' statements += Statement 'else' statements += Statement
		//|    statementType = 'while' '(' firstExpression = Expression ')' statements += Statement
		//|    variable = [Variable | ID] statementType = '=' firstExpression = Expression ';'
		//|    variable = [Variable | ID] isArrayElementAssignment?='[' firstExpression = Expression ']'
		//        statementType = '=' secondExpression = Expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statementType = '{' ( statements += Statement )* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//statementType = '{'
		public Assignment getStatementTypeAssignment_0_0() { return cStatementTypeAssignment_0_0; }
		
		//'{'
		public Keyword getStatementTypeLeftCurlyBracketKeyword_0_0_0() { return cStatementTypeLeftCurlyBracketKeyword_0_0_0; }
		
		//( statements += Statement )*
		public Assignment getStatementsAssignment_0_1() { return cStatementsAssignment_0_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_1_0() { return cStatementsStatementParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//statementType = 'if' '(' firstExpression = Expression ')' statements += Statement 'else' statements += Statement
		public Group getGroup_1() { return cGroup_1; }
		
		//statementType = 'if'
		public Assignment getStatementTypeAssignment_1_0() { return cStatementTypeAssignment_1_0; }
		
		//'if'
		public Keyword getStatementTypeIfKeyword_1_0_0() { return cStatementTypeIfKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//firstExpression = Expression
		public Assignment getFirstExpressionAssignment_1_2() { return cFirstExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_1_2_0() { return cFirstExpressionExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statements += Statement
		public Assignment getStatementsAssignment_1_4() { return cStatementsAssignment_1_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_4_0() { return cStatementsStatementParserRuleCall_1_4_0; }
		
		//'else'
		public Keyword getElseKeyword_1_5() { return cElseKeyword_1_5; }
		
		//statements += Statement
		public Assignment getStatementsAssignment_1_6() { return cStatementsAssignment_1_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_6_0() { return cStatementsStatementParserRuleCall_1_6_0; }
		
		//statementType = 'while' '(' firstExpression = Expression ')' statements += Statement
		public Group getGroup_2() { return cGroup_2; }
		
		//statementType = 'while'
		public Assignment getStatementTypeAssignment_2_0() { return cStatementTypeAssignment_2_0; }
		
		//'while'
		public Keyword getStatementTypeWhileKeyword_2_0_0() { return cStatementTypeWhileKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//firstExpression = Expression
		public Assignment getFirstExpressionAssignment_2_2() { return cFirstExpressionAssignment_2_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_2_2_0() { return cFirstExpressionExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//statements += Statement
		public Assignment getStatementsAssignment_2_4() { return cStatementsAssignment_2_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_4_0() { return cStatementsStatementParserRuleCall_2_4_0; }
		
		//variable = [Variable | ID] statementType = '=' firstExpression = Expression ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//variable = [Variable | ID]
		public Assignment getVariableAssignment_3_0() { return cVariableAssignment_3_0; }
		
		//[Variable | ID]
		public CrossReference getVariableVariableCrossReference_3_0_0() { return cVariableVariableCrossReference_3_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_0_0_1() { return cVariableVariableIDTerminalRuleCall_3_0_0_1; }
		
		//statementType = '='
		public Assignment getStatementTypeAssignment_3_1() { return cStatementTypeAssignment_3_1; }
		
		//'='
		public Keyword getStatementTypeEqualsSignKeyword_3_1_0() { return cStatementTypeEqualsSignKeyword_3_1_0; }
		
		//firstExpression = Expression
		public Assignment getFirstExpressionAssignment_3_2() { return cFirstExpressionAssignment_3_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_3_2_0() { return cFirstExpressionExpressionParserRuleCall_3_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
		
		//variable = [Variable | ID] isArrayElementAssignment?='[' firstExpression = Expression ']'
		//        statementType = '=' secondExpression = Expression ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//variable = [Variable | ID]
		public Assignment getVariableAssignment_4_0() { return cVariableAssignment_4_0; }
		
		//[Variable | ID]
		public CrossReference getVariableVariableCrossReference_4_0_0() { return cVariableVariableCrossReference_4_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_4_0_0_1() { return cVariableVariableIDTerminalRuleCall_4_0_0_1; }
		
		//isArrayElementAssignment?='['
		public Assignment getIsArrayElementAssignmentAssignment_4_1() { return cIsArrayElementAssignmentAssignment_4_1; }
		
		//'['
		public Keyword getIsArrayElementAssignmentLeftSquareBracketKeyword_4_1_0() { return cIsArrayElementAssignmentLeftSquareBracketKeyword_4_1_0; }
		
		//firstExpression = Expression
		public Assignment getFirstExpressionAssignment_4_2() { return cFirstExpressionAssignment_4_2; }
		
		//Expression
		public RuleCall getFirstExpressionExpressionParserRuleCall_4_2_0() { return cFirstExpressionExpressionParserRuleCall_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//statementType = '='
		public Assignment getStatementTypeAssignment_4_4() { return cStatementTypeAssignment_4_4; }
		
		//'='
		public Keyword getStatementTypeEqualsSignKeyword_4_4_0() { return cStatementTypeEqualsSignKeyword_4_4_0; }
		
		//secondExpression = Expression
		public Assignment getSecondExpressionAssignment_4_5() { return cSecondExpressionAssignment_4_5; }
		
		//Expression
		public RuleCall getSecondExpressionExpressionParserRuleCall_4_5_0() { return cSecondExpressionExpressionParserRuleCall_4_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_6() { return cSemicolonKeyword_4_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditionAdditionParserRuleCall_0_0 = (RuleCall)cAdditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeLessThanSignKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression returns Expr:
		//    addition = Addition ({Expression.left=current} expressionType = '<' right=Expression)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//addition = Addition ({Expression.left=current} expressionType = '<' right=Expression)?
		public Group getGroup() { return cGroup; }
		
		//addition = Addition
		public Assignment getAdditionAssignment_0() { return cAdditionAssignment_0; }
		
		//Addition
		public RuleCall getAdditionAdditionParserRuleCall_0_0() { return cAdditionAdditionParserRuleCall_0_0; }
		
		//({Expression.left=current} expressionType = '<' right=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//expressionType = '<'
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'<'
		public Keyword getExpressionTypeLessThanSignKeyword_1_1_0() { return cExpressionTypeLessThanSignKeyword_1_1_0; }
		
		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicationMultiplicationParserRuleCall_0_0 = (RuleCall)cMultiplicationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionTypeAlternatives_1_1_0 = (Alternatives)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Keyword cExpressionTypePlusSignKeyword_1_1_0_0 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExpressionTypeHyphenMinusKeyword_1_1_0_1 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expr:
		//    multiplication = Multiplication ({Addition.left=current} expressionType = ('+' | '-') right=Multiplication)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplication = Multiplication ({Addition.left=current} expressionType = ('+' | '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//multiplication = Multiplication
		public Assignment getMultiplicationAssignment_0() { return cMultiplicationAssignment_0; }
		
		//Multiplication
		public RuleCall getMultiplicationMultiplicationParserRuleCall_0_0() { return cMultiplicationMultiplicationParserRuleCall_0_0; }
		
		//({Addition.left=current} expressionType = ('+' | '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//expressionType = ('+' | '-')
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getExpressionTypeAlternatives_1_1_0() { return cExpressionTypeAlternatives_1_1_0; }
		
		//'+'
		public Keyword getExpressionTypePlusSignKeyword_1_1_0_0() { return cExpressionTypePlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getExpressionTypeHyphenMinusKeyword_1_1_0_1() { return cExpressionTypeHyphenMinusKeyword_1_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegationOrPointExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegationOrPointExpressionNegationOrPointExpressionParserRuleCall_0_0 = (RuleCall)cNegationOrPointExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpressionTypeAlternatives_1_1_0 = (Alternatives)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Keyword cExpressionTypeAsteriskKeyword_1_1_0_0 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExpressionTypeAmpersandAmpersandKeyword_1_1_0_1 = (Keyword)cExpressionTypeAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationOrPointExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expr:
		//    negationOrPointExpression = NegationOrPointExpression ({Multiplication.left=current} expressionType = ('*' | '&&') right=NegationOrPointExpression)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//negationOrPointExpression = NegationOrPointExpression ({Multiplication.left=current} expressionType = ('*' | '&&') right=NegationOrPointExpression)*
		public Group getGroup() { return cGroup; }
		
		//negationOrPointExpression = NegationOrPointExpression
		public Assignment getNegationOrPointExpressionAssignment_0() { return cNegationOrPointExpressionAssignment_0; }
		
		//NegationOrPointExpression
		public RuleCall getNegationOrPointExpressionNegationOrPointExpressionParserRuleCall_0_0() { return cNegationOrPointExpressionNegationOrPointExpressionParserRuleCall_0_0; }
		
		//({Multiplication.left=current} expressionType = ('*' | '&&') right=NegationOrPointExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//expressionType = ('*' | '&&')
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//('*' | '&&')
		public Alternatives getExpressionTypeAlternatives_1_1_0() { return cExpressionTypeAlternatives_1_1_0; }
		
		//'*'
		public Keyword getExpressionTypeAsteriskKeyword_1_1_0_0() { return cExpressionTypeAsteriskKeyword_1_1_0_0; }
		
		//'&&'
		public Keyword getExpressionTypeAmpersandAmpersandKeyword_1_1_0_1() { return cExpressionTypeAmpersandAmpersandKeyword_1_1_0_1; }
		
		//right=NegationOrPointExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NegationOrPointExpression
		public RuleCall getRightNegationOrPointExpressionParserRuleCall_1_2_0() { return cRightNegationOrPointExpressionParserRuleCall_1_2_0; }
	}
	public class NegationOrPointExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.NegationOrPointExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cPointAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPointPointParserRuleCall_1_0 = (RuleCall)cPointAssignment_1.eContents().get(0);
		
		//NegationOrPointExpression returns Expr:
		//    Negation
		//    | point = Point
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//Negation
		//| point = Point
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//point = Point
		public Assignment getPointAssignment_1() { return cPointAssignment_1; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_1_0() { return cPointPointParserRuleCall_1_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExpressionTypeExclamationMarkKeyword_0_0 = (Keyword)cExpressionTypeAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightPointParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Negation returns Expr:
		//    expressionType = '!' right = Point
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionType = '!' right = Point
		public Group getGroup() { return cGroup; }
		
		//expressionType = '!'
		public Assignment getExpressionTypeAssignment_0() { return cExpressionTypeAssignment_0; }
		
		//'!'
		public Keyword getExpressionTypeExclamationMarkKeyword_0_0() { return cExpressionTypeExclamationMarkKeyword_0_0; }
		
		//right = Point
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//Point
		public RuleCall getRightPointParserRuleCall_1_0() { return cRightPointParserRuleCall_1_0; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSquareBracketsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSquareBracketsSquareBracketsParserRuleCall_0_0 = (RuleCall)cSquareBracketsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPointLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeFullStopKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMethodCallExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Point returns Expr:
		//    squareBrackets = SquareBrackets ( {Point.left=current} expressionType = '.' right = MethodCallExpr )*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//squareBrackets = SquareBrackets ( {Point.left=current} expressionType = '.' right = MethodCallExpr )*
		public Group getGroup() { return cGroup; }
		
		//squareBrackets = SquareBrackets
		public Assignment getSquareBracketsAssignment_0() { return cSquareBracketsAssignment_0; }
		
		//SquareBrackets
		public RuleCall getSquareBracketsSquareBracketsParserRuleCall_0_0() { return cSquareBracketsSquareBracketsParserRuleCall_0_0; }
		
		//( {Point.left=current} expressionType = '.' right = MethodCallExpr )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Point.left=current}
		public Action getPointLeftAction_1_0() { return cPointLeftAction_1_0; }
		
		//expressionType = '.'
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'.'
		public Keyword getExpressionTypeFullStopKeyword_1_1_0() { return cExpressionTypeFullStopKeyword_1_1_0; }
		
		//right = MethodCallExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MethodCallExpr
		public RuleCall getRightMethodCallExprParserRuleCall_1_2_0() { return cRightMethodCallExprParserRuleCall_1_2_0; }
	}
	public class SquareBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.SquareBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimaryPrimaryParserRuleCall_0_0 = (RuleCall)cPrimaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSquareBracketsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cExpressionTypeLeftSquareBracketKeyword_1_1_0 = (Keyword)cExpressionTypeAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SquareBrackets returns Expr:
		//    primary = Primary ({SquareBrackets.left=current} expressionType = '[' right=Primary ']')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//primary = Primary ({SquareBrackets.left=current} expressionType = '[' right=Primary ']')?
		public Group getGroup() { return cGroup; }
		
		//primary = Primary
		public Assignment getPrimaryAssignment_0() { return cPrimaryAssignment_0; }
		
		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_0_0() { return cPrimaryPrimaryParserRuleCall_0_0; }
		
		//({SquareBrackets.left=current} expressionType = '[' right=Primary ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{SquareBrackets.left=current}
		public Action getSquareBracketsLeftAction_1_0() { return cSquareBracketsLeftAction_1_0; }
		
		//expressionType = '['
		public Assignment getExpressionTypeAssignment_1_1() { return cExpressionTypeAssignment_1_1; }
		
		//'['
		public Keyword getExpressionTypeLeftSquareBracketKeyword_1_1_0() { return cExpressionTypeLeftSquareBracketKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cExpressionTypeTrueKeyword_0_0 = (Keyword)cExpressionTypeAssignment_0.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cExpressionTypeFalseKeyword_1_0 = (Keyword)cExpressionTypeAssignment_1.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cExpressionTypeThisKeyword_2_0 = (Keyword)cExpressionTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cExpressionTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExpressionTypeNewKeyword_3_0_0 = (Keyword)cExpressionTypeAssignment_3_0.eContents().get(0);
		private final Keyword cIntKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cExpressionTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExpressionTypeNewKeyword_4_0_0 = (Keyword)cExpressionTypeAssignment_4_0.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cExpressionTypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cExpressionTypeLeftParenthesisKeyword_5_0_0 = (Keyword)cExpressionTypeAssignment_5_0.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cVariableAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final CrossReference cVariableVariableCrossReference_6_0 = (CrossReference)cVariableAssignment_6.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_6_0_1 = (RuleCall)cVariableVariableCrossReference_6_0.eContents().get(1);
		private final Assignment cNumberAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNumberNumberValueParserRuleCall_7_0 = (RuleCall)cNumberAssignment_7.eContents().get(0);
		
		//Primary returns Expr:
		//    expressionType = 'true'
		//    |    expressionType = 'false'
		//    |    expressionType = 'this'
		//    |    expressionType = 'new' 'int' '[' expression = Expression ']'
		//    |    expressionType = 'new' type = Type '(' ')'
		//    |    expressionType = '(' expression = Expression ')'
		//    |    variable = [Variable | ID]
		//    |    number = NumberValue
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionType = 'true'
		//|    expressionType = 'false'
		//|    expressionType = 'this'
		//|    expressionType = 'new' 'int' '[' expression = Expression ']'
		//|    expressionType = 'new' type = Type '(' ')'
		//|    expressionType = '(' expression = Expression ')'
		//|    variable = [Variable | ID]
		//|    number = NumberValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expressionType = 'true'
		public Assignment getExpressionTypeAssignment_0() { return cExpressionTypeAssignment_0; }
		
		//'true'
		public Keyword getExpressionTypeTrueKeyword_0_0() { return cExpressionTypeTrueKeyword_0_0; }
		
		//expressionType = 'false'
		public Assignment getExpressionTypeAssignment_1() { return cExpressionTypeAssignment_1; }
		
		//'false'
		public Keyword getExpressionTypeFalseKeyword_1_0() { return cExpressionTypeFalseKeyword_1_0; }
		
		//expressionType = 'this'
		public Assignment getExpressionTypeAssignment_2() { return cExpressionTypeAssignment_2; }
		
		//'this'
		public Keyword getExpressionTypeThisKeyword_2_0() { return cExpressionTypeThisKeyword_2_0; }
		
		//expressionType = 'new' 'int' '[' expression = Expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//expressionType = 'new'
		public Assignment getExpressionTypeAssignment_3_0() { return cExpressionTypeAssignment_3_0; }
		
		//'new'
		public Keyword getExpressionTypeNewKeyword_3_0_0() { return cExpressionTypeNewKeyword_3_0_0; }
		
		//'int'
		public Keyword getIntKeyword_3_1() { return cIntKeyword_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_2() { return cLeftSquareBracketKeyword_3_2; }
		
		//expression = Expression
		public Assignment getExpressionAssignment_3_3() { return cExpressionAssignment_3_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_3_0() { return cExpressionExpressionParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//expressionType = 'new' type = Type '(' ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//expressionType = 'new'
		public Assignment getExpressionTypeAssignment_4_0() { return cExpressionTypeAssignment_4_0; }
		
		//'new'
		public Keyword getExpressionTypeNewKeyword_4_0_0() { return cExpressionTypeNewKeyword_4_0_0; }
		
		//type = Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_1_0() { return cTypeTypeParserRuleCall_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//expressionType = '(' expression = Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//expressionType = '('
		public Assignment getExpressionTypeAssignment_5_0() { return cExpressionTypeAssignment_5_0; }
		
		//'('
		public Keyword getExpressionTypeLeftParenthesisKeyword_5_0_0() { return cExpressionTypeLeftParenthesisKeyword_5_0_0; }
		
		//expression = Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//variable = [Variable | ID]
		public Assignment getVariableAssignment_6() { return cVariableAssignment_6; }
		
		//[Variable | ID]
		public CrossReference getVariableVariableCrossReference_6_0() { return cVariableVariableCrossReference_6_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_6_0_1() { return cVariableVariableIDTerminalRuleCall_6_0_1; }
		
		//number = NumberValue
		public Assignment getNumberAssignment_7() { return cNumberAssignment_7; }
		
		//NumberValue
		public RuleCall getNumberNumberValueParserRuleCall_7_0() { return cNumberNumberValueParserRuleCall_7_0; }
	}
	public class MethodCallExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.MethodCallExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cExpressionTypeLengthKeyword_0_0 = (Keyword)cExpressionTypeAssignment_0.eContents().get(0);
		private final Assignment cMethodCallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMethodCallMethodCallParserRuleCall_1_0 = (RuleCall)cMethodCallAssignment_1.eContents().get(0);
		
		//MethodCallExpr returns Expr:
		//    expressionType = 'length'
		//    | methodCall = MethodCall
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionType = 'length'
		//| methodCall = MethodCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expressionType = 'length'
		public Assignment getExpressionTypeAssignment_0() { return cExpressionTypeAssignment_0; }
		
		//'length'
		public Keyword getExpressionTypeLengthKeyword_0_0() { return cExpressionTypeLengthKeyword_0_0; }
		
		//methodCall = MethodCall
		public Assignment getMethodCallAssignment_1() { return cMethodCallAssignment_1; }
		
		//MethodCall
		public RuleCall getMethodCallMethodCallParserRuleCall_1_0() { return cMethodCallMethodCallParserRuleCall_1_0; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMethodMethodCrossReference_0_0 = (CrossReference)cMethodAssignment_0.eContents().get(0);
		private final RuleCall cMethodMethodIDTerminalRuleCall_0_0_1 = (RuleCall)cMethodMethodCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersExpressionParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//    method = [Method | ID] '(' ( parameters += Expression ( ',' parameters += Expression )* )? ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//method = [Method | ID] '(' ( parameters += Expression ( ',' parameters += Expression )* )? ')'
		public Group getGroup() { return cGroup; }
		
		//method = [Method | ID]
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//[Method | ID]
		public CrossReference getMethodMethodCrossReference_0_0() { return cMethodMethodCrossReference_0_0; }
		
		//ID
		public RuleCall getMethodMethodIDTerminalRuleCall_0_0_1() { return cMethodMethodIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//( parameters += Expression ( ',' parameters += Expression )* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters += Expression
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_0_0() { return cParametersExpressionParserRuleCall_2_0_0; }
		
		//( ',' parameters += Expression )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters += Expression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_2_1_1_0() { return cParametersExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.test.minijava.Minijava.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//    value = INT
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//value = INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	
	
	private final GoalElements pGoal;
	private final PackageDeclElements pPackageDecl;
	private final ImportDeclElements pImportDecl;
	private final QualifiedName_Elements pQualifiedName_;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameListElements pQualifiedNameList;
	private final QualifiedNameLiElements pQualifiedNameLi;
	private final MainClassElements pMainClass;
	private final ClassDeclarationElements pClassDeclaration;
	private final TypeElements pType;
	private final VarDeclarationElements pVarDeclaration;
	private final VariableElements pVariable;
	private final VarListElements pVarList;
	private final VarLiElements pVarLi;
	private final MethodDeclarationElements pMethodDeclaration;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NegationOrPointExpressionElements pNegationOrPointExpression;
	private final NegationElements pNegation;
	private final PointElements pPoint;
	private final SquareBracketsElements pSquareBrackets;
	private final PrimaryElements pPrimary;
	private final MethodCallExprElements pMethodCallExpr;
	private final MethodCallElements pMethodCall;
	private final NumberValueElements pNumberValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MinijavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGoal = new GoalElements();
		this.pPackageDecl = new PackageDeclElements();
		this.pImportDecl = new ImportDeclElements();
		this.pQualifiedName_ = new QualifiedName_Elements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameList = new QualifiedNameListElements();
		this.pQualifiedNameLi = new QualifiedNameLiElements();
		this.pMainClass = new MainClassElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pType = new TypeElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVariable = new VariableElements();
		this.pVarList = new VarListElements();
		this.pVarLi = new VarLiElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNegationOrPointExpression = new NegationOrPointExpressionElements();
		this.pNegation = new NegationElements();
		this.pPoint = new PointElements();
		this.pSquareBrackets = new SquareBracketsElements();
		this.pPrimary = new PrimaryElements();
		this.pMethodCallExpr = new MethodCallExprElements();
		this.pMethodCall = new MethodCallElements();
		this.pNumberValue = new NumberValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.test.minijava.Minijava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Goal:
	//    ( package = PackageDecl )? ( importdecl += ImportDecl )* classDeclarations += MainClass ( classDeclarations += ClassDeclaration )*
	//    ;
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}
	
	//PackageDecl:
	//  'package' QualifiedName ';'
	//;
	public PackageDeclElements getPackageDeclAccess() {
		return pPackageDecl;
	}
	
	public ParserRule getPackageDeclRule() {
		return getPackageDeclAccess().getRule();
	}
	
	//ImportDecl:
	//    'import' QualifiedName ';'
	//;
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//QualifiedName_:
	//    "." ID QualifiedName_
	//;
	public QualifiedName_Elements getQualifiedName_Access() {
		return pQualifiedName_;
	}
	
	public ParserRule getQualifiedName_Rule() {
		return getQualifiedName_Access().getRule();
	}
	
	//QualifiedName:
	//    ID QualifiedName_
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameList:
	//    qualifiedName = QualifiedName (qualifiedNameLi = QualifiedNameLi)?
	//;
	public QualifiedNameListElements getQualifiedNameListAccess() {
		return pQualifiedNameList;
	}
	
	public ParserRule getQualifiedNameListRule() {
		return getQualifiedNameListAccess().getRule();
	}
	
	//QualifiedNameLi:
	//    "," qualifiedName = QualifiedName qualifiedNameLi = QualifiedNameLi
	//;
	public QualifiedNameLiElements getQualifiedNameLiAccess() {
		return pQualifiedNameLi;
	}
	
	public ParserRule getQualifiedNameLiRule() {
		return getQualifiedNameLiAccess().getRule();
	}
	
	//MainClass:
	//    'class' name = ID '{'
	//        'public' 'static' 'void' 'main' '(' 'String' '[' ']' ID ')' '{'
	//        ( varDeclarations += VarDeclaration
	//        | methodDeclarations += MethodDeclaration
	//        | statement = Statement
	//        )*
	//        '}'
	//    '}'
	//    ;
	public MainClassElements getMainClassAccess() {
		return pMainClass;
	}
	
	public ParserRule getMainClassRule() {
		return getMainClassAccess().getRule();
	}
	
	//ClassDeclaration:
	//    'class' name = ID ( 'extends' qualifiedName =  [ClassDeclaration | ID]  )? ('implements' qualifiedNameList = QualifiedNameList)? '{'
	//        ( varDeclarations += VarDeclaration
	//        | methodDeclarations += MethodDeclaration )*
	//    '}'
	//    ;
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//Type:
	//    'int' typeName = '[' ']'
	//    |    typeName = 'int'
	//    |    typeName = 'boolean'
	//    |    typeName = 'double'
	//    |    typeName = 'char'
	//    |    qualifiedName = QualifiedName
	//    |    '(' varList = VarList ')'
	//    ;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//VarDeclaration:
	//    variable = Variable ';'
	//    ;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//Variable:
	//    variableType = Type name = ID
	//    ;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VarList :
	//    VarDeclaration varLi = VarLi
	//;
	public VarListElements getVarListAccess() {
		return pVarList;
	}
	
	public ParserRule getVarListRule() {
		return getVarListAccess().getRule();
	}
	
	//VarLi :
	//    ',' VarDeclaration varLi = VarLi
	//;
	public VarLiElements getVarLiAccess() {
		return pVarLi;
	}
	
	public ParserRule getVarLiRule() {
		return getVarLiAccess().getRule();
	}
	
	//MethodDeclaration returns Method:
	//    ('public'|'protected'|'private') methodType = Type name = ID '(' varList =  VarList? ')' '{'
	//        ( localVarDeclarations += VarDeclaration )*
	//        ( statements += Statement )*
	//        ('return' returnExpression = Expression ';')?
	//    '}'
	//    ;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//Statement:
	//    statementType = '{' ( statements += Statement )* '}'
	//    |    statementType = 'if' '(' firstExpression = Expression ')' statements += Statement 'else' statements += Statement
	//    |    statementType = 'while' '(' firstExpression = Expression ')' statements += Statement
	//    |    variable = [Variable | ID] statementType = '=' firstExpression = Expression ';'
	//    |    variable = [Variable | ID] isArrayElementAssignment?='[' firstExpression = Expression ']'
	//            statementType = '=' secondExpression = Expression ';'
	//    ;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expr:
	//    addition = Addition ({Expression.left=current} expressionType = '<' right=Expression)?
	//    ;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Addition returns Expr:
	//    multiplication = Multiplication ({Addition.left=current} expressionType = ('+' | '-') right=Multiplication)*
	//    ;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expr:
	//    negationOrPointExpression = NegationOrPointExpression ({Multiplication.left=current} expressionType = ('*' | '&&') right=NegationOrPointExpression)*
	//    ;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//NegationOrPointExpression returns Expr:
	//    Negation
	//    | point = Point
	//    ;
	public NegationOrPointExpressionElements getNegationOrPointExpressionAccess() {
		return pNegationOrPointExpression;
	}
	
	public ParserRule getNegationOrPointExpressionRule() {
		return getNegationOrPointExpressionAccess().getRule();
	}
	
	//Negation returns Expr:
	//    expressionType = '!' right = Point
	//    ;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Point returns Expr:
	//    squareBrackets = SquareBrackets ( {Point.left=current} expressionType = '.' right = MethodCallExpr )*
	//    ;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//SquareBrackets returns Expr:
	//    primary = Primary ({SquareBrackets.left=current} expressionType = '[' right=Primary ']')?
	//    ;
	public SquareBracketsElements getSquareBracketsAccess() {
		return pSquareBrackets;
	}
	
	public ParserRule getSquareBracketsRule() {
		return getSquareBracketsAccess().getRule();
	}
	
	//Primary returns Expr:
	//    expressionType = 'true'
	//    |    expressionType = 'false'
	//    |    expressionType = 'this'
	//    |    expressionType = 'new' 'int' '[' expression = Expression ']'
	//    |    expressionType = 'new' type = Type '(' ')'
	//    |    expressionType = '(' expression = Expression ')'
	//    |    variable = [Variable | ID]
	//    |    number = NumberValue
	//    ;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//MethodCallExpr returns Expr:
	//    expressionType = 'length'
	//    | methodCall = MethodCall
	//    ;
	public MethodCallExprElements getMethodCallExprAccess() {
		return pMethodCallExpr;
	}
	
	public ParserRule getMethodCallExprRule() {
		return getMethodCallExprAccess().getRule();
	}
	
	//MethodCall:
	//    method = [Method | ID] '(' ( parameters += Expression ( ',' parameters += Expression )* )? ')'
	//    ;
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//NumberValue:
	//    value = INT
	//    ;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
