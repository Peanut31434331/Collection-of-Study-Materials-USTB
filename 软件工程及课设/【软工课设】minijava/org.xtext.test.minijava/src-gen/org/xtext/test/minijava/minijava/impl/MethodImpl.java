/**
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.minijava.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.test.minijava.minijava.Expr;
import org.xtext.test.minijava.minijava.Method;
import org.xtext.test.minijava.minijava.MinijavaPackage;
import org.xtext.test.minijava.minijava.Statement;
import org.xtext.test.minijava.minijava.Type;
import org.xtext.test.minijava.minijava.VarDeclaration;
import org.xtext.test.minijava.minijava.VarList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getMethodType <em>Method Type</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getVarList <em>Var List</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getLocalVarDeclarations <em>Local Var Declarations</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link org.xtext.test.minijava.minijava.impl.MethodImpl#getReturnExpression <em>Return Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends MinimalEObjectImpl.Container implements Method
{
  /**
   * The cached value of the '{@link #getMethodType() <em>Method Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodType()
   * @generated
   * @ordered
   */
  protected Type methodType;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVarList() <em>Var List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarList()
   * @generated
   * @ordered
   */
  protected VarList varList;

  /**
   * The cached value of the '{@link #getLocalVarDeclarations() <em>Local Var Declarations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocalVarDeclarations()
   * @generated
   * @ordered
   */
  protected EList<VarDeclaration> localVarDeclarations;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * The cached value of the '{@link #getReturnExpression() <em>Return Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnExpression()
   * @generated
   * @ordered
   */
  protected Expr returnExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MinijavaPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getMethodType()
  {
    return methodType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethodType(Type newMethodType, NotificationChain msgs)
  {
    Type oldMethodType = methodType;
    methodType = newMethodType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__METHOD_TYPE, oldMethodType, newMethodType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethodType(Type newMethodType)
  {
    if (newMethodType != methodType)
    {
      NotificationChain msgs = null;
      if (methodType != null)
        msgs = ((InternalEObject)methodType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__METHOD_TYPE, null, msgs);
      if (newMethodType != null)
        msgs = ((InternalEObject)newMethodType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__METHOD_TYPE, null, msgs);
      msgs = basicSetMethodType(newMethodType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__METHOD_TYPE, newMethodType, newMethodType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarList getVarList()
  {
    return varList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVarList(VarList newVarList, NotificationChain msgs)
  {
    VarList oldVarList = varList;
    varList = newVarList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__VAR_LIST, oldVarList, newVarList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarList(VarList newVarList)
  {
    if (newVarList != varList)
    {
      NotificationChain msgs = null;
      if (varList != null)
        msgs = ((InternalEObject)varList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__VAR_LIST, null, msgs);
      if (newVarList != null)
        msgs = ((InternalEObject)newVarList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__VAR_LIST, null, msgs);
      msgs = basicSetVarList(newVarList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__VAR_LIST, newVarList, newVarList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarDeclaration> getLocalVarDeclarations()
  {
    if (localVarDeclarations == null)
    {
      localVarDeclarations = new EObjectContainmentEList<VarDeclaration>(VarDeclaration.class, this, MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS);
    }
    return localVarDeclarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, MinijavaPackage.METHOD__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr getReturnExpression()
  {
    return returnExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnExpression(Expr newReturnExpression, NotificationChain msgs)
  {
    Expr oldReturnExpression = returnExpression;
    returnExpression = newReturnExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__RETURN_EXPRESSION, oldReturnExpression, newReturnExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnExpression(Expr newReturnExpression)
  {
    if (newReturnExpression != returnExpression)
    {
      NotificationChain msgs = null;
      if (returnExpression != null)
        msgs = ((InternalEObject)returnExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__RETURN_EXPRESSION, null, msgs);
      if (newReturnExpression != null)
        msgs = ((InternalEObject)newReturnExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MinijavaPackage.METHOD__RETURN_EXPRESSION, null, msgs);
      msgs = basicSetReturnExpression(newReturnExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MinijavaPackage.METHOD__RETURN_EXPRESSION, newReturnExpression, newReturnExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MinijavaPackage.METHOD__METHOD_TYPE:
        return basicSetMethodType(null, msgs);
      case MinijavaPackage.METHOD__VAR_LIST:
        return basicSetVarList(null, msgs);
      case MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS:
        return ((InternalEList<?>)getLocalVarDeclarations()).basicRemove(otherEnd, msgs);
      case MinijavaPackage.METHOD__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
      case MinijavaPackage.METHOD__RETURN_EXPRESSION:
        return basicSetReturnExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MinijavaPackage.METHOD__METHOD_TYPE:
        return getMethodType();
      case MinijavaPackage.METHOD__NAME:
        return getName();
      case MinijavaPackage.METHOD__VAR_LIST:
        return getVarList();
      case MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS:
        return getLocalVarDeclarations();
      case MinijavaPackage.METHOD__STATEMENTS:
        return getStatements();
      case MinijavaPackage.METHOD__RETURN_EXPRESSION:
        return getReturnExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MinijavaPackage.METHOD__METHOD_TYPE:
        setMethodType((Type)newValue);
        return;
      case MinijavaPackage.METHOD__NAME:
        setName((String)newValue);
        return;
      case MinijavaPackage.METHOD__VAR_LIST:
        setVarList((VarList)newValue);
        return;
      case MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS:
        getLocalVarDeclarations().clear();
        getLocalVarDeclarations().addAll((Collection<? extends VarDeclaration>)newValue);
        return;
      case MinijavaPackage.METHOD__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MinijavaPackage.METHOD__RETURN_EXPRESSION:
        setReturnExpression((Expr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.METHOD__METHOD_TYPE:
        setMethodType((Type)null);
        return;
      case MinijavaPackage.METHOD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MinijavaPackage.METHOD__VAR_LIST:
        setVarList((VarList)null);
        return;
      case MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS:
        getLocalVarDeclarations().clear();
        return;
      case MinijavaPackage.METHOD__STATEMENTS:
        getStatements().clear();
        return;
      case MinijavaPackage.METHOD__RETURN_EXPRESSION:
        setReturnExpression((Expr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MinijavaPackage.METHOD__METHOD_TYPE:
        return methodType != null;
      case MinijavaPackage.METHOD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MinijavaPackage.METHOD__VAR_LIST:
        return varList != null;
      case MinijavaPackage.METHOD__LOCAL_VAR_DECLARATIONS:
        return localVarDeclarations != null && !localVarDeclarations.isEmpty();
      case MinijavaPackage.METHOD__STATEMENTS:
        return statements != null && !statements.isEmpty();
      case MinijavaPackage.METHOD__RETURN_EXPRESSION:
        return returnExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MethodImpl
