/*
 * generated by Xtext 2.25.0
 */
package org.xtext.test.minijava.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.test.minijava.ide.contentassist.antlr.internal.InternalMinijavaParser;
import org.xtext.test.minijava.services.MinijavaGrammarAccess;

public class MinijavaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MinijavaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MinijavaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMainClassAccess().getAlternatives_14(), "rule__MainClass__Alternatives_14");
			builder.put(grammarAccess.getClassDeclarationAccess().getAlternatives_5(), "rule__ClassDeclaration__Alternatives_5");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getMethodDeclarationAccess().getAlternatives_0(), "rule__MethodDeclaration__Alternatives_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getExpressionTypeAlternatives_1_1_0(), "rule__Addition__ExpressionTypeAlternatives_1_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getExpressionTypeAlternatives_1_1_0(), "rule__Multiplication__ExpressionTypeAlternatives_1_1_0");
			builder.put(grammarAccess.getNegationOrPointExpressionAccess().getAlternatives(), "rule__NegationOrPointExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getMethodCallExprAccess().getAlternatives(), "rule__MethodCallExpr__Alternatives");
			builder.put(grammarAccess.getGoalAccess().getGroup(), "rule__Goal__Group__0");
			builder.put(grammarAccess.getPackageDeclAccess().getGroup(), "rule__PackageDecl__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
			builder.put(grammarAccess.getQualifiedName_Access().getGroup(), "rule__QualifiedName___Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameListAccess().getGroup(), "rule__QualifiedNameList__Group__0");
			builder.put(grammarAccess.getQualifiedNameLiAccess().getGroup(), "rule__QualifiedNameLi__Group__0");
			builder.put(grammarAccess.getMainClassAccess().getGroup(), "rule__MainClass__Group__0");
			builder.put(grammarAccess.getClassDeclarationAccess().getGroup(), "rule__ClassDeclaration__Group__0");
			builder.put(grammarAccess.getClassDeclarationAccess().getGroup_2(), "rule__ClassDeclaration__Group_2__0");
			builder.put(grammarAccess.getClassDeclarationAccess().getGroup_3(), "rule__ClassDeclaration__Group_3__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_6(), "rule__Type__Group_6__0");
			builder.put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getVarListAccess().getGroup(), "rule__VarList__Group__0");
			builder.put(grammarAccess.getVarLiAccess().getGroup(), "rule__VarLi__Group__0");
			builder.put(grammarAccess.getMethodDeclarationAccess().getGroup(), "rule__MethodDeclaration__Group__0");
			builder.put(grammarAccess.getMethodDeclarationAccess().getGroup_9(), "rule__MethodDeclaration__Group_9__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_2(), "rule__Statement__Group_2__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getNegationAccess().getGroup(), "rule__Negation__Group__0");
			builder.put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
			builder.put(grammarAccess.getPointAccess().getGroup_1(), "rule__Point__Group_1__0");
			builder.put(grammarAccess.getSquareBracketsAccess().getGroup(), "rule__SquareBrackets__Group__0");
			builder.put(grammarAccess.getSquareBracketsAccess().getGroup_1(), "rule__SquareBrackets__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_5(), "rule__Primary__Group_5__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_2(), "rule__MethodCall__Group_2__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup_2_1(), "rule__MethodCall__Group_2_1__0");
			builder.put(grammarAccess.getGoalAccess().getPackageAssignment_0(), "rule__Goal__PackageAssignment_0");
			builder.put(grammarAccess.getGoalAccess().getImportdeclAssignment_1(), "rule__Goal__ImportdeclAssignment_1");
			builder.put(grammarAccess.getGoalAccess().getClassDeclarationsAssignment_2(), "rule__Goal__ClassDeclarationsAssignment_2");
			builder.put(grammarAccess.getGoalAccess().getClassDeclarationsAssignment_3(), "rule__Goal__ClassDeclarationsAssignment_3");
			builder.put(grammarAccess.getQualifiedNameListAccess().getQualifiedNameAssignment_0(), "rule__QualifiedNameList__QualifiedNameAssignment_0");
			builder.put(grammarAccess.getQualifiedNameListAccess().getQualifiedNameLiAssignment_1(), "rule__QualifiedNameList__QualifiedNameLiAssignment_1");
			builder.put(grammarAccess.getQualifiedNameLiAccess().getQualifiedNameAssignment_1(), "rule__QualifiedNameLi__QualifiedNameAssignment_1");
			builder.put(grammarAccess.getQualifiedNameLiAccess().getQualifiedNameLiAssignment_2(), "rule__QualifiedNameLi__QualifiedNameLiAssignment_2");
			builder.put(grammarAccess.getMainClassAccess().getNameAssignment_1(), "rule__MainClass__NameAssignment_1");
			builder.put(grammarAccess.getMainClassAccess().getVarDeclarationsAssignment_14_0(), "rule__MainClass__VarDeclarationsAssignment_14_0");
			builder.put(grammarAccess.getMainClassAccess().getMethodDeclarationsAssignment_14_1(), "rule__MainClass__MethodDeclarationsAssignment_14_1");
			builder.put(grammarAccess.getMainClassAccess().getStatementAssignment_14_2(), "rule__MainClass__StatementAssignment_14_2");
			builder.put(grammarAccess.getClassDeclarationAccess().getNameAssignment_1(), "rule__ClassDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getClassDeclarationAccess().getQualifiedNameAssignment_2_1(), "rule__ClassDeclaration__QualifiedNameAssignment_2_1");
			builder.put(grammarAccess.getClassDeclarationAccess().getQualifiedNameListAssignment_3_1(), "rule__ClassDeclaration__QualifiedNameListAssignment_3_1");
			builder.put(grammarAccess.getClassDeclarationAccess().getVarDeclarationsAssignment_5_0(), "rule__ClassDeclaration__VarDeclarationsAssignment_5_0");
			builder.put(grammarAccess.getClassDeclarationAccess().getMethodDeclarationsAssignment_5_1(), "rule__ClassDeclaration__MethodDeclarationsAssignment_5_1");
			builder.put(grammarAccess.getTypeAccess().getTypeNameAssignment_0_1(), "rule__Type__TypeNameAssignment_0_1");
			builder.put(grammarAccess.getTypeAccess().getTypeNameAssignment_1(), "rule__Type__TypeNameAssignment_1");
			builder.put(grammarAccess.getTypeAccess().getTypeNameAssignment_2(), "rule__Type__TypeNameAssignment_2");
			builder.put(grammarAccess.getTypeAccess().getTypeNameAssignment_3(), "rule__Type__TypeNameAssignment_3");
			builder.put(grammarAccess.getTypeAccess().getTypeNameAssignment_4(), "rule__Type__TypeNameAssignment_4");
			builder.put(grammarAccess.getTypeAccess().getQualifiedNameAssignment_5(), "rule__Type__QualifiedNameAssignment_5");
			builder.put(grammarAccess.getTypeAccess().getVarListAssignment_6_1(), "rule__Type__VarListAssignment_6_1");
			builder.put(grammarAccess.getVarDeclarationAccess().getVariableAssignment_0(), "rule__VarDeclaration__VariableAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getVariableTypeAssignment_0(), "rule__Variable__VariableTypeAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
			builder.put(grammarAccess.getVarListAccess().getVarLiAssignment_1(), "rule__VarList__VarLiAssignment_1");
			builder.put(grammarAccess.getVarLiAccess().getVarLiAssignment_2(), "rule__VarLi__VarLiAssignment_2");
			builder.put(grammarAccess.getMethodDeclarationAccess().getMethodTypeAssignment_1(), "rule__MethodDeclaration__MethodTypeAssignment_1");
			builder.put(grammarAccess.getMethodDeclarationAccess().getNameAssignment_2(), "rule__MethodDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getMethodDeclarationAccess().getVarListAssignment_4(), "rule__MethodDeclaration__VarListAssignment_4");
			builder.put(grammarAccess.getMethodDeclarationAccess().getLocalVarDeclarationsAssignment_7(), "rule__MethodDeclaration__LocalVarDeclarationsAssignment_7");
			builder.put(grammarAccess.getMethodDeclarationAccess().getStatementsAssignment_8(), "rule__MethodDeclaration__StatementsAssignment_8");
			builder.put(grammarAccess.getMethodDeclarationAccess().getReturnExpressionAssignment_9_1(), "rule__MethodDeclaration__ReturnExpressionAssignment_9_1");
			builder.put(grammarAccess.getStatementAccess().getStatementTypeAssignment_0_0(), "rule__Statement__StatementTypeAssignment_0_0");
			builder.put(grammarAccess.getStatementAccess().getStatementsAssignment_0_1(), "rule__Statement__StatementsAssignment_0_1");
			builder.put(grammarAccess.getStatementAccess().getStatementTypeAssignment_1_0(), "rule__Statement__StatementTypeAssignment_1_0");
			builder.put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_1_2(), "rule__Statement__FirstExpressionAssignment_1_2");
			builder.put(grammarAccess.getStatementAccess().getStatementsAssignment_1_4(), "rule__Statement__StatementsAssignment_1_4");
			builder.put(grammarAccess.getStatementAccess().getStatementsAssignment_1_6(), "rule__Statement__StatementsAssignment_1_6");
			builder.put(grammarAccess.getStatementAccess().getStatementTypeAssignment_2_0(), "rule__Statement__StatementTypeAssignment_2_0");
			builder.put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_2_2(), "rule__Statement__FirstExpressionAssignment_2_2");
			builder.put(grammarAccess.getStatementAccess().getStatementsAssignment_2_4(), "rule__Statement__StatementsAssignment_2_4");
			builder.put(grammarAccess.getStatementAccess().getVariableAssignment_3_0(), "rule__Statement__VariableAssignment_3_0");
			builder.put(grammarAccess.getStatementAccess().getStatementTypeAssignment_3_1(), "rule__Statement__StatementTypeAssignment_3_1");
			builder.put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_3_2(), "rule__Statement__FirstExpressionAssignment_3_2");
			builder.put(grammarAccess.getStatementAccess().getVariableAssignment_4_0(), "rule__Statement__VariableAssignment_4_0");
			builder.put(grammarAccess.getStatementAccess().getIsArrayElementAssignmentAssignment_4_1(), "rule__Statement__IsArrayElementAssignmentAssignment_4_1");
			builder.put(grammarAccess.getStatementAccess().getFirstExpressionAssignment_4_2(), "rule__Statement__FirstExpressionAssignment_4_2");
			builder.put(grammarAccess.getStatementAccess().getStatementTypeAssignment_4_4(), "rule__Statement__StatementTypeAssignment_4_4");
			builder.put(grammarAccess.getStatementAccess().getSecondExpressionAssignment_4_5(), "rule__Statement__SecondExpressionAssignment_4_5");
			builder.put(grammarAccess.getExpressionAccess().getAdditionAssignment_0(), "rule__Expression__AdditionAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getExpressionTypeAssignment_1_1(), "rule__Expression__ExpressionTypeAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditionAccess().getMultiplicationAssignment_0(), "rule__Addition__MultiplicationAssignment_0");
			builder.put(grammarAccess.getAdditionAccess().getExpressionTypeAssignment_1_1(), "rule__Addition__ExpressionTypeAssignment_1_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationAccess().getNegationOrPointExpressionAssignment_0(), "rule__Multiplication__NegationOrPointExpressionAssignment_0");
			builder.put(grammarAccess.getMultiplicationAccess().getExpressionTypeAssignment_1_1(), "rule__Multiplication__ExpressionTypeAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getNegationOrPointExpressionAccess().getPointAssignment_1(), "rule__NegationOrPointExpression__PointAssignment_1");
			builder.put(grammarAccess.getNegationAccess().getExpressionTypeAssignment_0(), "rule__Negation__ExpressionTypeAssignment_0");
			builder.put(grammarAccess.getNegationAccess().getRightAssignment_1(), "rule__Negation__RightAssignment_1");
			builder.put(grammarAccess.getPointAccess().getSquareBracketsAssignment_0(), "rule__Point__SquareBracketsAssignment_0");
			builder.put(grammarAccess.getPointAccess().getExpressionTypeAssignment_1_1(), "rule__Point__ExpressionTypeAssignment_1_1");
			builder.put(grammarAccess.getPointAccess().getRightAssignment_1_2(), "rule__Point__RightAssignment_1_2");
			builder.put(grammarAccess.getSquareBracketsAccess().getPrimaryAssignment_0(), "rule__SquareBrackets__PrimaryAssignment_0");
			builder.put(grammarAccess.getSquareBracketsAccess().getExpressionTypeAssignment_1_1(), "rule__SquareBrackets__ExpressionTypeAssignment_1_1");
			builder.put(grammarAccess.getSquareBracketsAccess().getRightAssignment_1_2(), "rule__SquareBrackets__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_0(), "rule__Primary__ExpressionTypeAssignment_0");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_1(), "rule__Primary__ExpressionTypeAssignment_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_2(), "rule__Primary__ExpressionTypeAssignment_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_3_0(), "rule__Primary__ExpressionTypeAssignment_3_0");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_3(), "rule__Primary__ExpressionAssignment_3_3");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_4_0(), "rule__Primary__ExpressionTypeAssignment_4_0");
			builder.put(grammarAccess.getPrimaryAccess().getTypeAssignment_4_1(), "rule__Primary__TypeAssignment_4_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionTypeAssignment_5_0(), "rule__Primary__ExpressionTypeAssignment_5_0");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_5_1(), "rule__Primary__ExpressionAssignment_5_1");
			builder.put(grammarAccess.getPrimaryAccess().getVariableAssignment_6(), "rule__Primary__VariableAssignment_6");
			builder.put(grammarAccess.getPrimaryAccess().getNumberAssignment_7(), "rule__Primary__NumberAssignment_7");
			builder.put(grammarAccess.getMethodCallExprAccess().getExpressionTypeAssignment_0(), "rule__MethodCallExpr__ExpressionTypeAssignment_0");
			builder.put(grammarAccess.getMethodCallExprAccess().getMethodCallAssignment_1(), "rule__MethodCallExpr__MethodCallAssignment_1");
			builder.put(grammarAccess.getMethodCallAccess().getMethodAssignment_0(), "rule__MethodCall__MethodAssignment_0");
			builder.put(grammarAccess.getMethodCallAccess().getParametersAssignment_2_0(), "rule__MethodCall__ParametersAssignment_2_0");
			builder.put(grammarAccess.getMethodCallAccess().getParametersAssignment_2_1_1(), "rule__MethodCall__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getNumberValueAccess().getValueAssignment(), "rule__NumberValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MinijavaGrammarAccess grammarAccess;

	@Override
	protected InternalMinijavaParser createParser() {
		InternalMinijavaParser result = new InternalMinijavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MinijavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MinijavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
